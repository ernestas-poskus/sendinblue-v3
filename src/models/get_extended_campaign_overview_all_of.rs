/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetExtendedCampaignOverviewAllOf {
    /// Retrieved the status of test email sending. (true=Test email has been sent  false=Test email has not been sent)
    #[serde(rename = "testSent")]
    pub test_sent: bool,
    /// Header of the campaign
    #[serde(rename = "header")]
    pub header: String,
    /// Footer of the campaign
    #[serde(rename = "footer")]
    pub footer: String,
    #[serde(rename = "sender")]
    pub sender: Box<crate::models::GetExtendedCampaignOverviewAllOfSender>,
    /// Email defined as the \"Reply to\" of the campaign
    #[serde(rename = "replyTo")]
    pub reply_to: String,
    /// Customisation of the \"to\" field of the campaign
    #[serde(rename = "toField")]
    pub to_field: String,
    /// HTML content of the campaign
    #[serde(rename = "htmlContent")]
    pub html_content: String,
    /// Link to share the campaign on social medias
    #[serde(rename = "shareLink", skip_serializing_if = "Option::is_none")]
    pub share_link: Option<String>,
    /// Tag of the campaign
    #[serde(rename = "tag")]
    pub tag: String,
    /// Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "modifiedAt")]
    pub modified_at: String,
    /// Status of inline image. inlineImageActivation = false means image canâ€™t be embedded, & inlineImageActivation = true means image can be embedded, in the email.
    #[serde(rename = "inlineImageActivation", skip_serializing_if = "Option::is_none")]
    pub inline_image_activation: Option<bool>,
    /// Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
    #[serde(rename = "mirrorActive", skip_serializing_if = "Option::is_none")]
    pub mirror_active: Option<bool>,
    /// FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
    #[serde(rename = "recurring", skip_serializing_if = "Option::is_none")]
    pub recurring: Option<bool>,
    /// Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if 'status' of the campaign is 'sent'
    #[serde(rename = "sentDate", skip_serializing_if = "Option::is_none")]
    pub sent_date: Option<String>,
    /// Total number of non-delivered campaigns for a particular campaign id.
    #[serde(rename = "returnBounce", skip_serializing_if = "Option::is_none")]
    pub return_bounce: Option<i64>,
}

impl GetExtendedCampaignOverviewAllOf {
    pub fn new(test_sent: bool, header: String, footer: String, sender: crate::models::GetExtendedCampaignOverviewAllOfSender, reply_to: String, to_field: String, html_content: String, tag: String, created_at: String, modified_at: String) -> GetExtendedCampaignOverviewAllOf {
        GetExtendedCampaignOverviewAllOf {
            test_sent,
            header,
            footer,
            sender: Box::new(sender),
            reply_to,
            to_field,
            html_content,
            share_link: None,
            tag,
            created_at,
            modified_at,
            inline_image_activation: None,
            mirror_active: None,
            recurring: None,
            sent_date: None,
            return_bounce: None,
        }
    }
}


