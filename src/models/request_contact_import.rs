/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct RequestContactImport {
    /// Mandatory if fileBody is not defined. URL of the file to be imported (no local file). Possible file formats: .txt, .csv
    #[serde(rename = "fileUrl", skip_serializing_if = "Option::is_none")]
    pub file_url: Option<String>,
    /// Mandatory if fileUrl is not defined. CSV content to be imported. Use semicolon to separate multiple attributes. Maximum allowed file body size is 10MB . However we recommend a safe limit of around 8 MB to avoid the issues caused due to increase of file body size while parsing. Please use fileUrl instead to import bigger files.
    #[serde(rename = "fileBody", skip_serializing_if = "Option::is_none")]
    pub file_body: Option<String>,
    /// Mandatory if newList is not defined. Ids of the lists in which the contacts shall be imported. For example, [2, 4, 7].
    #[serde(rename = "listIds", skip_serializing_if = "Option::is_none")]
    pub list_ids: Option<Vec<i64>>,
    /// URL that will be called once the import process is finished. For reference, https://help.sendinblue.com/hc/en-us/articles/360007666479
    #[serde(rename = "notifyUrl", skip_serializing_if = "Option::is_none")]
    pub notify_url: Option<String>,
    #[serde(rename = "newList", skip_serializing_if = "Option::is_none")]
    pub new_list: Option<Box<crate::models::RequestContactImportNewList>>,
    /// To blacklist all the contacts for email
    #[serde(rename = "emailBlacklist", skip_serializing_if = "Option::is_none")]
    pub email_blacklist: Option<bool>,
    /// To blacklist all the contacts for sms
    #[serde(rename = "smsBlacklist", skip_serializing_if = "Option::is_none")]
    pub sms_blacklist: Option<bool>,
    /// To facilitate the choice to update the existing contacts
    #[serde(rename = "updateExistingContacts", skip_serializing_if = "Option::is_none")]
    pub update_existing_contacts: Option<bool>,
    /// To facilitate the choice to erase any attribute of the existing contacts with empty value. emptyContactsAttributes = true means the empty fields in your import will erase any attribute that currently contain data in SendinBlue, & emptyContactsAttributes = false means the empty fields will not affect your existing data ( only available if `updateExistingContacts` set to true )
    #[serde(rename = "emptyContactsAttributes", skip_serializing_if = "Option::is_none")]
    pub empty_contacts_attributes: Option<bool>,
}

impl RequestContactImport {
    pub fn new() -> RequestContactImport {
        RequestContactImport {
            file_url: None,
            file_body: None,
            list_ids: None,
            notify_url: None,
            new_list: None,
            email_blacklist: None,
            sms_blacklist: None,
            update_existing_contacts: None,
            empty_contacts_attributes: None,
        }
    }
}


