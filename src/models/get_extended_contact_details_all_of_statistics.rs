/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */

/// GetExtendedContactDetailsAllOfStatistics : Campaign statistics of the contact



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetExtendedContactDetailsAllOfStatistics {
    /// Listing of the sent campaign for the contact
    #[serde(rename = "messagesSent", skip_serializing_if = "Option::is_none")]
    pub messages_sent: Option<Vec<crate::models::GetExtendedContactDetailsAllOfStatisticsMessagesSent>>,
    /// Listing of the hardbounes generated by the contact
    #[serde(rename = "hardBounces", skip_serializing_if = "Option::is_none")]
    pub hard_bounces: Option<Vec<crate::models::GetExtendedContactDetailsAllOfStatisticsMessagesSent>>,
    /// Listing of the softbounes generated by the contact
    #[serde(rename = "softBounces", skip_serializing_if = "Option::is_none")]
    pub soft_bounces: Option<Vec<crate::models::GetExtendedContactDetailsAllOfStatisticsMessagesSent>>,
    /// Listing of the complaints generated by the contact
    #[serde(rename = "complaints", skip_serializing_if = "Option::is_none")]
    pub complaints: Option<Vec<crate::models::GetExtendedContactDetailsAllOfStatisticsMessagesSent>>,
    #[serde(rename = "unsubscriptions", skip_serializing_if = "Option::is_none")]
    pub unsubscriptions: Option<Box<crate::models::GetExtendedContactDetailsAllOfStatisticsUnsubscriptions>>,
    /// Listing of the openings generated by the contact
    #[serde(rename = "opened", skip_serializing_if = "Option::is_none")]
    pub opened: Option<Vec<crate::models::GetExtendedContactDetailsAllOfStatisticsOpened>>,
    /// Listing of the clicks generated by the contact
    #[serde(rename = "clicked", skip_serializing_if = "Option::is_none")]
    pub clicked: Option<Vec<crate::models::GetExtendedContactDetailsAllOfStatisticsClicked>>,
    /// Listing of the transactional attributes for the contact
    #[serde(rename = "transacAttributes", skip_serializing_if = "Option::is_none")]
    pub transac_attributes: Option<Vec<serde_json::Value>>,
}

impl GetExtendedContactDetailsAllOfStatistics {
    /// Campaign statistics of the contact
    pub fn new() -> GetExtendedContactDetailsAllOfStatistics {
        GetExtendedContactDetailsAllOfStatistics {
            messages_sent: None,
            hard_bounces: None,
            soft_bounces: None,
            complaints: None,
            unsubscriptions: None,
            opened: None,
            clicked: None,
            transac_attributes: None,
        }
    }
}


