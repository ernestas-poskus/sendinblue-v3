/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateChild {
    /// Email address to create the child account
    #[serde(rename = "email")]
    pub email: String,
    /// First name to use to create the child account
    #[serde(rename = "firstName")]
    pub first_name: String,
    /// Last name to use to create the child account
    #[serde(rename = "lastName")]
    pub last_name: String,
    /// Company name to use to create the child account
    #[serde(rename = "companyName")]
    pub company_name: String,
    /// Password for the child account to login
    #[serde(rename = "password")]
    pub password: String,
    /// Language of the child account
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<Language>,
}

impl CreateChild {
    pub fn new(email: String, first_name: String, last_name: String, company_name: String, password: String) -> CreateChild {
        CreateChild {
            email,
            first_name,
            last_name,
            company_name,
            password,
            language: None,
        }
    }
}

/// Language of the child account
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Language {
    #[serde(rename = "fr")]
    Fr,
    #[serde(rename = "es")]
    Es,
    #[serde(rename = "pt")]
    Pt,
    #[serde(rename = "it")]
    It,
    #[serde(rename = "de")]
    De,
    #[serde(rename = "en")]
    En,
}

impl Default for Language {
    fn default() -> Language {
        Self::Fr
    }
}

