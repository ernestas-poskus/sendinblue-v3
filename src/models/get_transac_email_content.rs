/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetTransacEmailContent {
    /// Email address to which transactional email has been sent
    #[serde(rename = "email")]
    pub email: String,
    /// Subject of the sent email
    #[serde(rename = "subject")]
    pub subject: String,
    /// Id of the template
    #[serde(rename = "templateId", skip_serializing_if = "Option::is_none")]
    pub template_id: Option<i64>,
    /// Date on which transactional email was sent
    #[serde(rename = "date")]
    pub date: String,
    /// Series of events which occurred on the transactional email
    #[serde(rename = "events")]
    pub events: Vec<crate::models::GetTransacEmailContentEventsInner>,
    /// Actual content of the transactional email that has been sent
    #[serde(rename = "body")]
    pub body: String,
    /// Count of the attachments that were sent in the email
    #[serde(rename = "attachmentCount")]
    pub attachment_count: i64,
}

impl GetTransacEmailContent {
    pub fn new(email: String, subject: String, date: String, events: Vec<crate::models::GetTransacEmailContentEventsInner>, body: String, attachment_count: i64) -> GetTransacEmailContent {
        GetTransacEmailContent {
            email,
            subject,
            template_id: None,
            date,
            events,
            body,
            attachment_count,
        }
    }
}


