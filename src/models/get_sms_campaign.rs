/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetSmsCampaign {
    /// ID of the SMS Campaign
    #[serde(rename = "id")]
    pub id: i64,
    /// Name of the SMS Campaign
    #[serde(rename = "name")]
    pub name: String,
    /// Status of the SMS Campaign
    #[serde(rename = "status")]
    pub status: Status,
    /// Content of the SMS Campaign
    #[serde(rename = "content")]
    pub content: String,
    /// UTC date-time on which SMS campaign is scheduled. Should be in YYYY-MM-DDTHH:mm:ss.SSSZ format
    #[serde(rename = "scheduledAt")]
    pub scheduled_at: String,
    /// Sender of the SMS Campaign
    #[serde(rename = "sender")]
    pub sender: String,
    /// Creation UTC date-time of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// UTC date-time of last modification of the SMS campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "modifiedAt")]
    pub modified_at: String,
    #[serde(rename = "recipients")]
    pub recipients: Box<crate::models::GetCampaignRecipients>,
    #[serde(rename = "statistics")]
    pub statistics: Box<crate::models::GetSmsCampaignStats>,
}

impl GetSmsCampaign {
    pub fn new(id: i64, name: String, status: Status, content: String, scheduled_at: String, sender: String, created_at: String, modified_at: String, recipients: crate::models::GetCampaignRecipients, statistics: crate::models::GetSmsCampaignStats) -> GetSmsCampaign {
        GetSmsCampaign {
            id,
            name,
            status,
            content,
            scheduled_at,
            sender,
            created_at,
            modified_at,
            recipients: Box::new(recipients),
            statistics: Box::new(statistics),
        }
    }
}

/// Status of the SMS Campaign
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "sent")]
    Sent,
    #[serde(rename = "archive")]
    Archive,
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "suspended")]
    Suspended,
    #[serde(rename = "inProcess")]
    InProcess,
}

impl Default for Status {
    fn default() -> Status {
        Self::Draft
    }
}

