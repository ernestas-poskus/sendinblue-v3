/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct UpdateContact {
    /// Pass the set of attributes to be updated. These attributes must be present in your account. To update existing email address of a contact with the new one please pass EMAIL in attribtes. For example, `{ \"EMAIL\":\"newemail@domain.com\", \"FNAME\":\"Ellie\", \"LNAME\":\"Roger\"}`. Keep in mind transactional attributes can be updated the same way as normal attributes. Mobile Number in \"SMS\" field should be passed with proper country code. For example {\"SMS\":\"+91xxxxxxxxxx\"} or {\"SMS\":\"0091xxxxxxxxxx\"}
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<serde_json::Value>,
    /// Set/unset this field to blacklist/allow the contact for emails (emailBlacklisted = true)
    #[serde(rename = "emailBlacklisted", skip_serializing_if = "Option::is_none")]
    pub email_blacklisted: Option<bool>,
    /// Set/unset this field to blacklist/allow the contact for SMS (smsBlacklisted = true)
    #[serde(rename = "smsBlacklisted", skip_serializing_if = "Option::is_none")]
    pub sms_blacklisted: Option<bool>,
    /// Ids of the lists to add the contact to
    #[serde(rename = "listIds", skip_serializing_if = "Option::is_none")]
    pub list_ids: Option<Vec<i64>>,
    /// Ids of the lists to remove the contact from
    #[serde(rename = "unlinkListIds", skip_serializing_if = "Option::is_none")]
    pub unlink_list_ids: Option<Vec<i64>>,
    /// transactional email forbidden sender for contact. Use only for email Contact
    #[serde(rename = "smtpBlacklistSender", skip_serializing_if = "Option::is_none")]
    pub smtp_blacklist_sender: Option<Vec<String>>,
}

impl UpdateContact {
    pub fn new() -> UpdateContact {
        UpdateContact {
            attributes: None,
            email_blacklisted: None,
            sms_blacklisted: None,
            list_ids: None,
            unlink_list_ids: None,
            smtp_blacklist_sender: None,
        }
    }
}


