/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetEmailCampaignsCampaignsInner {
    /// ID of the campaign
    #[serde(rename = "id")]
    pub id: i64,
    /// Name of the campaign
    #[serde(rename = "name")]
    pub name: String,
    /// Subject of the campaign. Only available if `abTesting` flag of the campaign is `false`
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// Type of campaign
    #[serde(rename = "type")]
    pub r#type: RHashType,
    /// Status of the campaign
    #[serde(rename = "status")]
    pub status: Status,
    /// UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "scheduledAt", skip_serializing_if = "Option::is_none")]
    pub scheduled_at: Option<String>,
    /// Status of A/B Test for the campaign. abTesting = false means it is disabled, & abTesting = true means it is enabled.
    #[serde(rename = "abTesting", skip_serializing_if = "Option::is_none")]
    pub ab_testing: Option<bool>,
    /// Subject A of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`
    #[serde(rename = "subjectA", skip_serializing_if = "Option::is_none")]
    pub subject_a: Option<String>,
    /// Subject B of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`
    #[serde(rename = "subjectB", skip_serializing_if = "Option::is_none")]
    pub subject_b: Option<String>,
    /// The size of your ab-test groups. Only available if `abTesting` flag of the campaign is `true`
    #[serde(rename = "splitRule", skip_serializing_if = "Option::is_none")]
    pub split_rule: Option<i32>,
    /// Criteria for the winning version. Only available if `abTesting` flag of the campaign is `true`
    #[serde(rename = "winnerCriteria", skip_serializing_if = "Option::is_none")]
    pub winner_criteria: Option<String>,
    /// The duration of the test in hours at the end of which the winning version will be sent. Only available if `abTesting` flag of the campaign is `true`
    #[serde(rename = "winnerDelay", skip_serializing_if = "Option::is_none")]
    pub winner_delay: Option<i32>,
    /// It is true if you have chosen to send your campaign at best time, otherwise it is false
    #[serde(rename = "sendAtBestTime", skip_serializing_if = "Option::is_none")]
    pub send_at_best_time: Option<bool>,
    /// Retrieved the status of test email sending. (true=Test email has been sent  false=Test email has not been sent)
    #[serde(rename = "testSent")]
    pub test_sent: bool,
    /// Header of the campaign
    #[serde(rename = "header")]
    pub header: String,
    /// Footer of the campaign
    #[serde(rename = "footer")]
    pub footer: String,
    #[serde(rename = "sender")]
    pub sender: Box<crate::models::GetExtendedCampaignOverviewAllOfSender>,
    /// Email defined as the \"Reply to\" of the campaign
    #[serde(rename = "replyTo")]
    pub reply_to: String,
    /// Customisation of the \"to\" field of the campaign
    #[serde(rename = "toField")]
    pub to_field: String,
    /// HTML content of the campaign
    #[serde(rename = "htmlContent")]
    pub html_content: String,
    /// Link to share the campaign on social medias
    #[serde(rename = "shareLink", skip_serializing_if = "Option::is_none")]
    pub share_link: Option<String>,
    /// Tag of the campaign
    #[serde(rename = "tag")]
    pub tag: String,
    /// Creation UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// UTC date-time of last modification of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "modifiedAt")]
    pub modified_at: String,
    /// Status of inline image. inlineImageActivation = false means image canâ€™t be embedded, & inlineImageActivation = true means image can be embedded, in the email.
    #[serde(rename = "inlineImageActivation", skip_serializing_if = "Option::is_none")]
    pub inline_image_activation: Option<bool>,
    /// Status of mirror links in campaign. mirrorActive = false means mirror links are deactivated, & mirrorActive = true means mirror links are activated, in the campaign
    #[serde(rename = "mirrorActive", skip_serializing_if = "Option::is_none")]
    pub mirror_active: Option<bool>,
    /// FOR TRIGGER ONLY ! Type of trigger campaign.recurring = false means contact can receive the same Trigger campaign only once, & recurring = true means contact can receive the same Trigger campaign several times
    #[serde(rename = "recurring", skip_serializing_if = "Option::is_none")]
    pub recurring: Option<bool>,
    /// Sent UTC date-time of the campaign (YYYY-MM-DDTHH:mm:ss.SSSZ). Only available if 'status' of the campaign is 'sent'
    #[serde(rename = "sentDate", skip_serializing_if = "Option::is_none")]
    pub sent_date: Option<String>,
    /// Total number of non-delivered campaigns for a particular campaign id.
    #[serde(rename = "returnBounce", skip_serializing_if = "Option::is_none")]
    pub return_bounce: Option<i64>,
    #[serde(rename = "recipients")]
    pub recipients: Box<crate::models::GetEmailCampaignsCampaignsInnerAllOfRecipients>,
    #[serde(rename = "statistics")]
    pub statistics: Box<crate::models::GetEmailCampaignsCampaignsInnerAllOfStatistics>,
}

impl GetEmailCampaignsCampaignsInner {
    pub fn new(id: i64, name: String, r#type: RHashType, status: Status, test_sent: bool, header: String, footer: String, sender: crate::models::GetExtendedCampaignOverviewAllOfSender, reply_to: String, to_field: String, html_content: String, tag: String, created_at: String, modified_at: String, recipients: crate::models::GetEmailCampaignsCampaignsInnerAllOfRecipients, statistics: crate::models::GetEmailCampaignsCampaignsInnerAllOfStatistics) -> GetEmailCampaignsCampaignsInner {
        GetEmailCampaignsCampaignsInner {
            id,
            name,
            subject: None,
            r#type,
            status,
            scheduled_at: None,
            ab_testing: None,
            subject_a: None,
            subject_b: None,
            split_rule: None,
            winner_criteria: None,
            winner_delay: None,
            send_at_best_time: None,
            test_sent,
            header,
            footer,
            sender: Box::new(sender),
            reply_to,
            to_field,
            html_content,
            share_link: None,
            tag,
            created_at,
            modified_at,
            inline_image_activation: None,
            mirror_active: None,
            recurring: None,
            sent_date: None,
            return_bounce: None,
            recipients: Box::new(recipients),
            statistics: Box::new(statistics),
        }
    }
}

/// Type of campaign
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "classic")]
    Classic,
    #[serde(rename = "trigger")]
    Trigger,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Classic
    }
}
/// Status of the campaign
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "sent")]
    Sent,
    #[serde(rename = "archive")]
    Archive,
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "suspended")]
    Suspended,
    #[serde(rename = "in_process")]
    InProcess,
}

impl Default for Status {
    fn default() -> Status {
        Self::Draft
    }
}

