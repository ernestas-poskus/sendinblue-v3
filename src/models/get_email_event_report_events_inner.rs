/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetEmailEventReportEventsInner {
    /// Email address which generates the event
    #[serde(rename = "email")]
    pub email: String,
    /// UTC date-time on which the event has been generated
    #[serde(rename = "date")]
    pub date: String,
    /// Subject of the event
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// Message ID which generated the event
    #[serde(rename = "messageId")]
    pub message_id: String,
    /// Event which occurred
    #[serde(rename = "event")]
    pub event: Event,
    /// Reason of bounce (only available if the event is hardbounce or softbounce)
    #[serde(rename = "reason", skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// Tag of the email which generated the event
    #[serde(rename = "tag", skip_serializing_if = "Option::is_none")]
    pub tag: Option<String>,
    /// IP from which the user has opened the email or clicked on the link (only available if the event is opened or clicks)
    #[serde(rename = "ip", skip_serializing_if = "Option::is_none")]
    pub ip: Option<String>,
    /// The link which is sent to the user (only available if the event is requests or opened or clicks)
    #[serde(rename = "link", skip_serializing_if = "Option::is_none")]
    pub link: Option<String>,
    /// Sender email from which the emails are sent
    #[serde(rename = "from", skip_serializing_if = "Option::is_none")]
    pub from: Option<String>,
}

impl GetEmailEventReportEventsInner {
    pub fn new(email: String, date: String, message_id: String, event: Event) -> GetEmailEventReportEventsInner {
        GetEmailEventReportEventsInner {
            email,
            date,
            subject: None,
            message_id,
            event,
            reason: None,
            tag: None,
            ip: None,
            link: None,
            from: None,
        }
    }
}

/// Event which occurred
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Event {
    #[serde(rename = "bounces")]
    Bounces,
    #[serde(rename = "hardBounces")]
    HardBounces,
    #[serde(rename = "softBounces")]
    SoftBounces,
    #[serde(rename = "delivered")]
    Delivered,
    #[serde(rename = "spam")]
    Spam,
    #[serde(rename = "requests")]
    Requests,
    #[serde(rename = "opened")]
    Opened,
    #[serde(rename = "clicks")]
    Clicks,
    #[serde(rename = "invalid")]
    Invalid,
    #[serde(rename = "deferred")]
    Deferred,
    #[serde(rename = "blocked")]
    Blocked,
    #[serde(rename = "unsubscribed")]
    Unsubscribed,
}

impl Default for Event {
    fn default() -> Event {
        Self::Bounces
    }
}

