/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetSmtpTemplateOverview {
    /// ID of the template
    #[serde(rename = "id")]
    pub id: i64,
    /// Name of the template
    #[serde(rename = "name")]
    pub name: String,
    /// Subject of the template
    #[serde(rename = "subject")]
    pub subject: String,
    /// Status of template (true=active, false=inactive)
    #[serde(rename = "isActive")]
    pub is_active: bool,
    /// Status of test sending for the template (true=test email has been sent, false=test email has not been sent)
    #[serde(rename = "testSent")]
    pub test_sent: bool,
    #[serde(rename = "sender")]
    pub sender: Box<crate::models::GetSmtpTemplateOverviewSender>,
    /// Email defined as the \"Reply to\" for the template
    #[serde(rename = "replyTo")]
    pub reply_to: String,
    /// Customisation of the \"to\" field for the template
    #[serde(rename = "toField")]
    pub to_field: String,
    /// Tag of the template
    #[serde(rename = "tag")]
    pub tag: String,
    /// HTML content of the template
    #[serde(rename = "htmlContent")]
    pub html_content: String,
    /// Creation UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "createdAt")]
    pub created_at: String,
    /// Last modification UTC date-time of the template (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "modifiedAt")]
    pub modified_at: String,
    /// It is true if template is a valid Double opt-in (DOI) template, otherwise it is false. This field will be available only in case of single template detail call.
    #[serde(rename = "doiTemplate", skip_serializing_if = "Option::is_none")]
    pub doi_template: Option<bool>,
}

impl GetSmtpTemplateOverview {
    pub fn new(id: i64, name: String, subject: String, is_active: bool, test_sent: bool, sender: crate::models::GetSmtpTemplateOverviewSender, reply_to: String, to_field: String, tag: String, html_content: String, created_at: String, modified_at: String) -> GetSmtpTemplateOverview {
        GetSmtpTemplateOverview {
            id,
            name,
            subject,
            is_active,
            test_sent,
            sender: Box::new(sender),
            reply_to,
            to_field,
            tag,
            html_content,
            created_at,
            modified_at,
            doi_template: None,
        }
    }
}


