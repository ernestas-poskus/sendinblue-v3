/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */

/// GetTransacBlockedContactsContactsInnerReason : Reason for blocking / unsubscribing



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetTransacBlockedContactsContactsInnerReason {
    /// Reason code for blocking / unsubscribing (This code is safe for comparison)
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<Code>,
    /// Reason for blocking / unsubscribing (This string is not safe for comparison)
    #[serde(rename = "message", skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
}

impl GetTransacBlockedContactsContactsInnerReason {
    /// Reason for blocking / unsubscribing
    pub fn new() -> GetTransacBlockedContactsContactsInnerReason {
        GetTransacBlockedContactsContactsInnerReason {
            code: None,
            message: None,
        }
    }
}

/// Reason code for blocking / unsubscribing (This code is safe for comparison)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Code {
    #[serde(rename = "unsubscribedViaMA")]
    UnsubscribedViaMa,
    #[serde(rename = "unsubscribedViaEmail")]
    UnsubscribedViaEmail,
    #[serde(rename = "adminBlocked")]
    AdminBlocked,
    #[serde(rename = "unsubscribedViaApi")]
    UnsubscribedViaApi,
    #[serde(rename = "hardBounce")]
    HardBounce,
    #[serde(rename = "contactFlaggedAsSpam")]
    ContactFlaggedAsSpam,
}

impl Default for Code {
    fn default() -> Code {
        Self::UnsubscribedViaMa
    }
}

