/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetProcess {
    /// Id of the process
    #[serde(rename = "id")]
    pub id: i64,
    /// Status of the process
    #[serde(rename = "status")]
    pub status: Status,
    /// Process name
    #[serde(rename = "name")]
    pub name: String,
    /// URL on which send export the of contacts once the process is completed
    #[serde(rename = "export_url", skip_serializing_if = "Option::is_none")]
    pub export_url: Option<String>,
}

impl GetProcess {
    pub fn new(id: i64, status: Status, name: String) -> GetProcess {
        GetProcess {
            id,
            status,
            name,
            export_url: None,
        }
    }
}

/// Status of the process
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "in_process")]
    InProcess,
    #[serde(rename = "completed")]
    Completed,
}

impl Default for Status {
    fn default() -> Status {
        Self::Queued
    }
}

