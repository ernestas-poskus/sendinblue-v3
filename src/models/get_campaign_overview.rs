/*
 * SendinBlue API
 *
 * SendinBlue provide a RESTFul API that can be used with any languages. With this API, you will be able to :   - Manage your campaigns and get the statistics   - Manage your contacts   - Send transactional Emails and SMS   - and much more...  You can download our wrappers at https://github.com/orgs/sendinblue  **Possible responses**   | Code | Message |   | :-------------: | ------------- |   | 200  | OK. Successful Request  |   | 201  | OK. Successful Creation |   | 202  | OK. Request accepted |   | 204  | OK. Successful Update/Deletion  |   | 400  | Error. Bad Request  |   | 401  | Error. Authentication Needed  |   | 402  | Error. Not enough credit, plan upgrade needed  |   | 403  | Error. Permission denied  |   | 404  | Error. Object does not exist |   | 405  | Error. Method not allowed  |   | 406  | Error. Not Acceptable  | 
 *
 * The version of the OpenAPI document: 3.0.0
 * Contact: contact@sendinblue.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct GetCampaignOverview {
    /// ID of the campaign
    #[serde(rename = "id")]
    pub id: i64,
    /// Name of the campaign
    #[serde(rename = "name")]
    pub name: String,
    /// Subject of the campaign. Only available if `abTesting` flag of the campaign is `false`
    #[serde(rename = "subject", skip_serializing_if = "Option::is_none")]
    pub subject: Option<String>,
    /// Type of campaign
    #[serde(rename = "type")]
    pub r#type: RHashType,
    /// Status of the campaign
    #[serde(rename = "status")]
    pub status: Status,
    /// UTC date-time on which campaign is scheduled (YYYY-MM-DDTHH:mm:ss.SSSZ)
    #[serde(rename = "scheduledAt", skip_serializing_if = "Option::is_none")]
    pub scheduled_at: Option<String>,
    /// Status of A/B Test for the campaign. abTesting = false means it is disabled, & abTesting = true means it is enabled.
    #[serde(rename = "abTesting", skip_serializing_if = "Option::is_none")]
    pub ab_testing: Option<bool>,
    /// Subject A of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`
    #[serde(rename = "subjectA", skip_serializing_if = "Option::is_none")]
    pub subject_a: Option<String>,
    /// Subject B of the ab-test campaign. Only available if `abTesting` flag of the campaign is `true`
    #[serde(rename = "subjectB", skip_serializing_if = "Option::is_none")]
    pub subject_b: Option<String>,
    /// The size of your ab-test groups. Only available if `abTesting` flag of the campaign is `true`
    #[serde(rename = "splitRule", skip_serializing_if = "Option::is_none")]
    pub split_rule: Option<i32>,
    /// Criteria for the winning version. Only available if `abTesting` flag of the campaign is `true`
    #[serde(rename = "winnerCriteria", skip_serializing_if = "Option::is_none")]
    pub winner_criteria: Option<String>,
    /// The duration of the test in hours at the end of which the winning version will be sent. Only available if `abTesting` flag of the campaign is `true`
    #[serde(rename = "winnerDelay", skip_serializing_if = "Option::is_none")]
    pub winner_delay: Option<i32>,
    /// It is true if you have chosen to send your campaign at best time, otherwise it is false
    #[serde(rename = "sendAtBestTime", skip_serializing_if = "Option::is_none")]
    pub send_at_best_time: Option<bool>,
}

impl GetCampaignOverview {
    pub fn new(id: i64, name: String, r#type: RHashType, status: Status) -> GetCampaignOverview {
        GetCampaignOverview {
            id,
            name,
            subject: None,
            r#type,
            status,
            scheduled_at: None,
            ab_testing: None,
            subject_a: None,
            subject_b: None,
            split_rule: None,
            winner_criteria: None,
            winner_delay: None,
            send_at_best_time: None,
        }
    }
}

/// Type of campaign
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RHashType {
    #[serde(rename = "classic")]
    Classic,
    #[serde(rename = "trigger")]
    Trigger,
}

impl Default for RHashType {
    fn default() -> RHashType {
        Self::Classic
    }
}
/// Status of the campaign
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "draft")]
    Draft,
    #[serde(rename = "sent")]
    Sent,
    #[serde(rename = "archive")]
    Archive,
    #[serde(rename = "queued")]
    Queued,
    #[serde(rename = "suspended")]
    Suspended,
    #[serde(rename = "in_process")]
    InProcess,
}

impl Default for Status {
    fn default() -> Status {
        Self::Draft
    }
}

